/*
 * tasks.c
 *
 *  Created on: Apr 14, 2021
 *      Author: sebastian
 */

#include "tasks.h"

/*
 * 	Examples of use
 */

/*




*/


/*
 * 	Functions
 */

// Reads the potentiometer value and sets the Run-to-Complete Scheduler timing with it.
void potentiometerTask() {
	u16 temp_data;
	temp_data = getXAdcAuxData(POT_CH);

	tick_value = 100 - (temp_data >> 6);
}

// Reads joystick analog value and button value and set movement and shooting with it.
void joystickTask(int GYRO_GPIO_ID) {
	u16 temp_data;
	u8 temp_btn;

	temp_data = getXAdcAuxData(GYRO_X_CH);
	temp_btn = readGpio(GYRO_GPIO_ID);

	if (temp_data > 3048) {
		move_direction = RIGHT;
	} else if (temp_data < 1048) {
		move_direction = LEFT;
	} else {
		move_direction = NONE;
	}

	shot_request = temp_btn;
}

// Sets the colors of the background depending on level
void backgroundTask() {
	u16 color_level = 255 - level * 51;
	for (int row = 1; row < NUMBER_OF_ROWS+1; row++) {
		for (int column = 1; column < NUMBER_OF_COLS+1; column++) {
			if (row == 1 || row == 2) {
				setPixelValue(column, row, 0, 255, 0);
			} else {
				setPixelValue(column, row, 0, 0, color_level);
			}
		}
	}
}

// Handles timing and moving sprites, as well as checking for collision.
// Can be seen as main game logic task.
void spritesTask() {

}

// Writes values to the matrix once background and sprites are set.
void matrixTask() {
	writeAllPixelsToDevice();
}

// Handles updating the level and player HP, as well as writing statistics.
void levelTask(int LED_GPIO_ID) {

	if (level < 5 && (small_kills+medium_kills+big_kills) > level*10) {
		level++;
	}

	if (player_health == 4) {
		writeGpio(LED_GPIO_ID, LED_1 | LED_2 | LED_3 | LED_4);
	} else if (player_health == 3) {
		writeGpio(LED_GPIO_ID, LED_1 | LED_2 | LED_3);
	} else if (player_health == 2) {
		writeGpio(LED_GPIO_ID, LED_1 | LED_2);
	} else if (player_health == 1) {
		writeGpio(LED_GPIO_ID, LED_1);
	} else {
		writeGpio(LED_GPIO_ID, 0);
		game_over = 1;
	}

	writeLevel(level);
	writeSmallKills(small_kills);
	writeMedKills(medium_kills);
	writeBigKills(big_kills);
	writeHealth(player_health);
	writePowerUp(power_up);
}
