/*
 * led_matrix.c
 *
 *  Created on: Mar 24, 2021
 *      Author: Sebastian
 */

#include "led_matrix.h"

/*
 	 Functions
*/

// Initialization of LED Matrix by initialization of BRAM.
u8 initLedMatrix(u8 deviceID) {
	u8 status;

	BramConfigPtr = XBram_LookupConfig(deviceID);
	if (BramConfigPtr == (XBram_Config *) NULL) {
		xil_printf("Config lookup failed");
		return XST_FAILURE;
	}

	// Initialize BRAM from configuration
	status = XBram_CfgInitialize(&Bram, BramConfigPtr, BramConfigPtr->CtrlBaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Initialization failed");
		return XST_FAILURE;
	}

	// Do selftest of BRAM module to check that it's functional
	status = XBram_SelfTest(&Bram, 0);
	if (status != XST_SUCCESS) {
		xil_printf("Selftest failed");
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

// Write 32-bit value to LED Matrix.
void ledMatrixOut32(u32 data, u32 addr) {
	XBram_Out32(BramConfigPtr->MemBaseAddress+addr, data);
}

// Set value of pixel by using integers
void setPixelValue(u8 x, u8 y, u8 red, u8 green, u8 blue) {
	pixels[x-1][y-1][RED] = red;
	pixels[x-1][y-1][GREEN] = green;
	pixels[x-1][y-1][BLUE] = blue;
}

// Set value of pixel by using structs
void setPixel(position_t pos, color_t col) {
	pixels[pos.x-1][pos.y-1][RED] = col.red;
	pixels[pos.x-1][pos.y-1][GREEN] = col.green;
	pixels[pos.x-1][pos.y-1][BLUE] = col.blue;
}

// Set value of a pixel using enum color input
void setPixelColor(position_t pos, enum COLORS col) {
	u8 red_temp, green_temp, blue_temp;

	switch (col) {
	case red:
		red_temp = 255;
		green_temp = 0;
		blue_temp = 0;
		break;
	case yellow:
		red_temp = 255;
		green_temp = 255;
		blue_temp = 0;
		break;
	case purple:
		red_temp = 255;
		green_temp = 0;
		blue_temp = 255;
		break;
	case green:
		red_temp = 0;
		green_temp = 255;
		blue_temp = 0;
		break;
	case blue:
		red_temp = 0;
		green_temp = 0;
		blue_temp = 255;
		break;
	case teal:
		red_temp = 0;
		green_temp = 255;
		blue_temp = 255;
		break;
	case white:
		red_temp = 255;
		green_temp = 255;
		blue_temp = 255;
		break;
	default:
		red_temp = 0;
		green_temp = 0;
		blue_temp = 0;
		break;
	}

	pixels[pos.x-1][pos.y-1][RED] = red_temp;
	pixels[pos.x-1][pos.y-1][GREEN] = green_temp;
	pixels[pos.x-1][pos.y-1][BLUE] = blue_temp;

}

// Get value of a pixel as integers
void getPixelValue(u8 x, u8 y, u8 *red, u8 *green, u8 *blue) {
	*red = pixels[x-1][y-1][RED];
	*green = pixels[x-1][y-1][GREEN];
	*blue = pixels[x-1][y-1][BLUE];
}

// Get value of a pixel as struct
void getPixel(position_t pos, color_t *col) {
	col->red = pixels[pos.x-1][pos.y-1][RED];
	col->green = pixels[pos.x-1][pos.y-1][GREEN];
	col->blue = pixels[pos.x-1][pos.y-1][BLUE];
}

// Write a pixel's value out to the LED Matrix using integer
void writePixelValueToDevice(u8 x, u8 y) {
	u32 data = (pixels[x-1][y-1][RED]<<RED_SHIFT) | (pixels[x-1][y-1][GREEN]<<GREEN_SHIFT) | (pixels[x-1][y-1][BLUE]);
	ledMatrixOut32(data, BYTES_PER_WORD*((x-1)+((y-1)*NUMBER_OF_COLS)));
}

// Write a pixel's value out to the LED Matrix using struct
void writePixelToDevice(position_t pos) {
	u32 data = (pixels[pos.x-1][pos.y-1][RED]<<RED_SHIFT) | (pixels[pos.x-1][pos.y-1][GREEN]<<GREEN_SHIFT) | (pixels[pos.x-1][pos.y-1][BLUE]);
	ledMatrixOut32(data, BYTES_PER_WORD*((pos.x-1)+((pos.y-1)*NUMBER_OF_COLS)));
}

// Set value of pixel and write it to the LED Matrix using integers
void writePixelValueDirect(u8 x, u8 y, u8 red, u8 green, u8 blue) {
	setPixelValue(x, y, red, green, blue);
	writePixelValueToDevice(x, y);
}

// Set value of pixel and write it to the LED Matrix using structs
void writePixelDirect(position_t pos, color_t col) {
	setPixel(pos, col);
	writePixelToDevice(pos);
}

// Write all pixel values out to the LED Matrix
void writeAllPixelsToDevice() {
	for (int i = 1; i < 9; i++) {
		for (int j = 1; j < 9; j++) {
			writePixelValueToDevice(i,j);
		}
	}
}

// Reset all pixels.
void resetAllPixels() {
	for (int i = 1; i < 9; i++) {
		for (int j = 1; j < 9; j++) {
			writePixelValueDirect(i, j, 0, 0, 0);
		}
	}
}
