#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xbram.h"

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define BRAM_DEVICE_ID		XPAR_BRAM_0_DEVICE_ID


/************************** Function Prototypes ******************************/


/************************** Variable Definitions *****************************/

/*
 * The following are declared globally so they are zeroed and so they are
 * easily accessible from a debugger
 */
XBram Bram;	/* The Instance of the BRAM Driver */


/****************************************************************************/
/**
*
* This function is the main function of the BRAM example.
*
* @param	None.
*
* @return
*		- XST_SUCCESS to indicate success.
*		- XST_FAILURE to indicate failure.
*
* @note		None.
*
*****************************************************************************/
int main(void)
{
	int Status;
	XBram_Config *ConfigPtr;

	// Look up BRAM configuration
	ConfigPtr = XBram_LookupConfig(BRAM_DEVICE_ID);
	if (ConfigPtr == (XBram_Config *) NULL) {
		xil_printf("Config lookup failed");
		while(1);
	}

	// Initialize BRAM from configuration
	Status = XBram_CfgInitialize(&Bram, ConfigPtr, ConfigPtr->CtrlBaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed");
		while(1);
	}

	// If ready for write, write some data
	for (u32 Addr = ConfigPtr->MemBaseAddress; Addr < ConfigPtr->MemBaseAddress+(4*4*32+1); Addr+=4)
	{
		XBram_Out32(Addr, 0x00FF0000);
	}

	// Do selftest of BRAM module to check that it's functional
	Status = XBram_SelfTest(&Bram, 0);
	if (Status != XST_SUCCESS) {
		xil_printf("Selftest failed");
		while(1);
	}

	xil_printf("Successfully ran Bram Example\r\n");
	while(1);
	return XST_SUCCESS;
}
