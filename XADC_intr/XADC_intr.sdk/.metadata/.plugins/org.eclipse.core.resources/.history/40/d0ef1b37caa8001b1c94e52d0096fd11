/************ ELECTRIC GO-KART MAIN ************/
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xscugic.h"
#include "xil_exception.h"

// User includes
#include "xadc.h"

// User defines
#define INTC_DEVICE_ID XPAR_SCUGIC_SINGLE_DEVICE_ID
#define IRQ_F2P XIL_EXCEPTION_ID_INT
#define XADC_EOS 61
#define HIGH_PRIORITY 0
#define RISING_EDGE 0b11

static void XAdcInterruptHandler(XAdcPs *XAdc);

// User structs


// User variables
XScuGic InterruptController;
XScuGic_Config *IntcConfig;

XAdcPs XAdc;
XAdcPs_Config *XAdcConfigPtr;

u8 Status;
u32 IntrStatus;

int main()
{
    init_platform();

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(&InterruptController, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


    initXAdc();

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler) XScuGic_InterruptHandler,
				&InterruptController);


	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above performs
	 * the specific interrupt processing for the device.
	 */
	Status = XScuGic_Connect(&InterruptController, XADC_EOS,
				(Xil_ExceptionHandler)XAdcInterruptHandler,
				&XAdc);
	if (Status != XST_SUCCESS) {
		return Status;
	}


	/*
	 * Enable the interrupt for the XADC device.
	 */
	XScuGic_Enable(&InterruptController, XADC_EOS);

	XScuGic_SetPriorityTriggerType(&InterruptController, XADC_EOS, HIGH_PRIORITY, RISING_EDGE);

	/*
	 * Enable exceptions.
	 */
	Xil_ExceptionEnable();


    /************************
     * INSERT CODE HERE
     */

    cleanup_platform();
    return 0;
}

static void XAdcInterruptHandler(XAdcPs *XAdc) {

}
